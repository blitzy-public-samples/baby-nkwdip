version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: baby-cry-analyzer-api:1.0.0
    container_name: bca-api
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_KEY}
      - NEW_RELIC_APP_NAME=baby-cry-analyzer-api
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ./dist:/app/dist:ro
      - ./node_modules:/app/node_modules:ro
      - api_logs:/app/logs
    depends_on:
      - mongodb
      - redis
      - ml-service
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # ML Service
  ml-service:
    build:
      context: .
      dockerfile: ../infrastructure/docker/ml.dockerfile
    image: baby-cry-analyzer-ml:1.0.0
    container_name: bca-ml
    environment:
      - PYTHONPATH=/app/src
      - TENSORFLOW_VERSION=4.2.0
      - NODE_ENV=production
      - CUDA_VISIBLE_DEVICES=0
      - TF_FORCE_GPU_ALLOW_GROWTH=true
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_KEY}
      - NEW_RELIC_APP_NAME=baby-cry-analyzer-ml
    ports:
      - "5000:5000"
    volumes:
      - ml_models:/app/models
      - ml_logs:/app/logs
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend
    restart: unless-stopped

  # MongoDB Service
  mongodb:
    image: mongo:6.0
    container_name: bca-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=baby_cry_analyzer
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Service
  redis:
    image: redis:7.0-alpine
    container_name: bca-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # NGINX Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: bca-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../infrastructure/docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - ml-service
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      device: /data/mongodb
      o: bind
  mongodb_config:
    driver: local
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis
      o: bind
  ml_models:
    driver: local
  ml_logs:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  backend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: bca_backend
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1