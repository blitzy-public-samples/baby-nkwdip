# Fastfile for Baby Cry Analyzer iOS App
# Version: 2.212.2
# Secure CI/CD configuration with enhanced security validations

# Import required plugins and configurations
require 'fastlane'
require 'fastlane-plugin-match' # version: 0.1.0
require 'fastlane-plugin-versioning' # version: 0.5.0
require 'cocoapods-core' # version: 1.12.1

# Import app configuration
import "./Appfile"

# Set platform configuration
platform :ios do
  # Global configuration
  xcodeproj = "BabyCryAnalyzer.xcodeproj"
  workspace = "BabyCryAnalyzer.xcworkspace"
  scheme = "BabyCryAnalyzer"
  min_ios_version = "14.0"

  before_all do |lane, options|
    # Validate environment setup
    validate_required_environment_variables
    
    # Setup secure code signing
    setup_code_signing
    
    # Verify development environment
    verify_xcode_version
    verify_ruby_version
    
    # Initialize monitoring
    setup_error_tracking
  end

  desc "Run comprehensive test suite with security validation"
  lane :test do
    # Clean build artifacts
    clear_derived_data
    
    # Install dependencies securely
    cocoapods(
      clean_install: true,
      repo_update: true
    )
    
    # Run static code analysis
    swiftlint(
      strict: true,
      reporter: "junit",
      config_file: ".swiftlint.yml"
    )
    
    # Run security analysis
    run_security_scan
    
    # Run tests
    scan(
      scheme: scheme,
      workspace: workspace,
      devices: ["iPhone 14"],
      clean: true,
      code_coverage: true,
      output_types: "html,junit",
      fail_build: true
    )
    
    # Validate test coverage
    validate_test_coverage
    
    # Generate test reports
    generate_test_reports
  end

  desc "Deploy beta version to TestFlight"
  lane :beta do
    # Verify git status
    ensure_git_status_clean
    ensure_git_branch(branch: "develop")
    
    # Increment build number
    increment_build_number(
      build_number: latest_testflight_build_number + 1
    )
    
    # Install dependencies
    cocoapods(
      clean_install: true,
      repo_update: true
    )
    
    # Match certificates and profiles
    match(
      type: "appstore",
      readonly: true,
      force_for_new_devices: true
    )
    
    # Build app
    gym(
      scheme: scheme,
      workspace: workspace,
      export_method: "app-store",
      include_bitcode: true,
      include_symbols: true,
      export_options: {
        provisioningProfiles: {
          app_identifier => "match AppStore #{app_identifier}"
        }
      }
    )
    
    # Run security validation
    validate_binary_security
    
    # Upload to TestFlight
    pilot(
      skip_waiting_for_build_processing: true,
      distribute_external: false,
      changelog: generate_changelog,
      beta_app_review_info: {
        contact_email: ENV["BETA_REVIEW_EMAIL"],
        contact_first_name: ENV["BETA_REVIEW_FIRST_NAME"],
        contact_last_name: ENV["BETA_REVIEW_LAST_NAME"],
        contact_phone: ENV["BETA_REVIEW_PHONE"]
      }
    )
    
    # Tag beta version
    add_git_tag(
      tag: "beta-#{get_version_number}-#{get_build_number}"
    )
    
    # Notify team
    notify_beta_release
  end

  desc "Deploy production release to App Store"
  lane :release do
    # Verify release prerequisites
    ensure_release_ready
    
    # Verify git branch
    ensure_git_branch(branch: "main")
    
    # Verify version and build numbers
    verify_version_numbers
    
    # Install dependencies
    cocoapods(
      clean_install: true,
      repo_update: true
    )
    
    # Match production certificates
    match(
      type: "appstore",
      readonly: true,
      force_for_new_devices: true
    )
    
    # Build production app
    gym(
      scheme: scheme,
      workspace: workspace,
      export_method: "app-store",
      include_bitcode: true,
      include_symbols: true,
      export_options: {
        provisioningProfiles: {
          app_identifier => "match AppStore #{app_identifier}"
        }
      }
    )
    
    # Run compliance checks
    validate_app_compliance
    
    # Upload to App Store
    deliver(
      submit_for_review: true,
      force: true,
      automatic_release: false,
      submission_information: {
        add_id_info_uses_idfa: false,
        export_compliance_uses_encryption: true,
        export_compliance_encryption_updated: false
      }
    )
    
    # Create release tag
    add_git_tag(
      tag: "v#{get_version_number}"
    )
    
    # Update changelog
    update_changelog
    
    # Notify stakeholders
    notify_release
  end

  error do |lane, exception, options|
    # Handle errors and notify team
    handle_error(lane, exception)
  end

  after_all do |lane, options|
    # Cleanup and notifications
    cleanup_build_artifacts
    notify_lane_completion(lane)
  end
end

# Helper methods for enhanced security and validation
def validate_required_environment_variables
  required_vars = [
    "APPLE_ID", "TEAM_ID", "ITC_TEAM_ID", "MATCH_PASSWORD",
    "FASTLANE_PASSWORD", "MATCH_GIT_URL"
  ]
  
  required_vars.each do |var|
    UI.user_error!("Missing required environment variable: #{var}") if ENV[var].nil?
  end
end

def setup_code_signing
  unless ENV["MATCH_GIT_URL"].nil?
    match(
      type: "development",
      readonly: true,
      force_for_new_devices: true
    )
  end
end

def run_security_scan
  # Run security static analysis
  swiftlint(
    mode: :lint,
    strict: true,
    config_file: ".swiftlint-security.yml"
  )
  
  # Additional security checks
  sh("security find-identity -v -p codesigning")
end

def validate_binary_security
  # Validate app binary security
  sh("codesign --verify --verbose #{lane_context[SharedValues::IPA_OUTPUT_PATH]}")
end

def ensure_release_ready
  UI.user_error!("Version number not incremented") unless version_changed?
  UI.user_error!("Changelog not updated") unless changelog_updated?
  validate_app_compliance
end

def notify_beta_release
  # Implement beta release notification
  slack(
    message: "New beta version #{get_version_number} (#{get_build_number}) uploaded to TestFlight",
    success: true,
    payload: { "Build Date" => Time.new.to_s }
  ) if ENV["SLACK_URL"]
end

def notify_release
  # Implement production release notification
  slack(
    message: "Version #{get_version_number} released to App Store",
    success: true,
    payload: { "Release Date" => Time.new.to_s }
  ) if ENV["SLACK_URL"]
end

def handle_error(lane, exception)
  # Log error details
  UI.error("Error in lane #{lane}: #{exception}")
  
  # Notify team
  slack(
    message: "Error in #{lane}: #{exception}",
    success: false,
    payload: { "Stack Trace" => exception.backtrace.join("\n") }
  ) if ENV["SLACK_URL"]
end